#include <stdio.h>
#include <stdlib.h>
// AVL tree node structure
typedef struct Node {
    int key;
    struct Node* left;
    struct Node* right;
    int height;
} Node;
// Function to get the height of the tree
int height(Node* N) {
    if (N == NULL)
        return 0;
    return N->height;
}
// Function to get the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}
// Function to create a new AVL tree node
Node* createNode(int key) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->left = node->right = NULL;
    node->height = 1; // New node is initially added at leaf
    return node;
}
// Right rotate subtree rooted with y
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    // Perform rotation
    x->right = y;
    y->left = T2;
    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    // Return new root
    return x;
}
// Left rotate subtree rooted with x
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    // Perform rotation
    y->left = x;
    x->right = T2;
    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    // Return new root
    return y;
}
// Get the balance factor of node N
int getBalance(Node* N) {
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}
// Function to insert a key in the subtree rooted with node and returns the new root of the subtree
Node* insert(Node* node, int key) {
    // Perform the normal BST insertion
    if (node == NULL)
        return createNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Equal keys are not allowed in BST
        return node;
    // Update height of this ancestor node
    node->height = 1 + max(height(node->left), height(node->right));
    // Get the balance factor of this ancestor node to check whether this node became unbalanced
    int balance = getBalance(node);
    // If this node becomes unbalanced, then there are 4 cases
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    // Return the (unchanged) node pointer
    return node;
}
// Function to find the node with minimum key value found in that tree
Node* minValueNode(Node* node) {
    Node* current = node;
    // Loop down to find the leftmost leaf
    while (current->left != NULL)
        current = current->left;
    return current;
}
// Function to delete a node with given key from subtree with given root. It returns root of the modified subtree.
Node* deleteNode(Node* root, int key) {
    // Perform standard BST delete
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Node with only one child or no child
        if ((root->left == NULL) || (root->right == NULL)) {
            Node* temp = root->left ? root->left : root->right;
            // No child case
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else // One child case
                *root = *temp; // Copy the contents of the non-empty child
            free(temp);
        } else {
            // Node with two children: Get the inorder successor (smallest in the right subtree)
            Node* temp = minValueNode(root->right);
            // Copy the inorder successor's data to this node
            root->key = temp->key;
            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->key);
        }
    }
    // If the tree had only one node then return
    if (root == NULL)
        return root;
    // Update height of the current node
    root->height = 1 + max(height(root->left), height(root->right));
    // Get the balance factor of this node
    int balance = getBalance(root);
    // If this node becomes unbalanced, then there are 4 cases
    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}
// Function to search a given key in AVL tree
Node* search(Node* root, int key) {
    // Base cases: root is null or key is present at root
    if (root == NULL || root->key == key)
        return root;
    // Key is greater than root's key
    if (root->key < key)
        return search(root->right, key);
    // Key is smaller than root's key
    return search(root->left, key);
}
// Function to print the preorder traversal of the tree
void preOrder(Node* root) {
    if (root != NULL) {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}
int main() {
    Node* root = NULL;
    int choice, key;
        printf("\nAVL Tree Operations:\n");
        printf("1. Insert an element\n");
        printf("2. Delete an element\n");
        printf("3. Search for a key\n");
        printf("4. Display Preorder traversal\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                printf("Preorder traversal after insertion: ");
                preOrder(root);
                printf("\n");
                break;
            case 2:
                printf("Enter the key to delete: ");
                scanf("%d", &key);
                root = deleteNode(root, key);
                printf("Preorder traversal after deletion: ");
                preOrder(root);
                printf("\n");
                break;
            case 3:
                printf("Enter the key to search: ");
                scanf("%d", &key);
                Node* result = search(root, key);
                if (result != NULL)
                    printf("Key %d found in the AVL tree.\n", key);
                else
                    printf("Key %d not found in the AVL tree.\n", key);
                break;
            case 4:
                printf("Preorder traversal of the AVL tree: ");
                preOrder(root);
                printf("\n");
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        
    }

    return 0;
}
