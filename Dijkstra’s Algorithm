#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX 100
// Structure to represent a graph
typedef struct Graph {
    int numVertices;
    int adjMatrix[MAX][MAX];
} Graph;
// Function to create a new graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    // Initialize all matrix values to infinity
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->adjMatrix[i][j] = INT_MAX;
        }
    }
    return graph;
}
// Function to add an edge to the graph
void addEdge(Graph* graph, int src, int dest, int weight) {
    graph->adjMatrix[src][dest] = weight;
}

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], int visited[], int n) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < n; v++) {
        if (visited[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}
// Function to print the distance array
void printSolution(int dist[], int n) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < n; i++)
        printf("%d \t %d\n", i, dist[i]);
}
// Dijkstra's algorithm to find shortest paths from source to all vertices
void dijkstra(Graph* graph, int src) {
    int dist[MAX];     // The output array. dist[i] will hold the shortest distance from src to i
    // visited[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized
    int visited[MAX];
    // Initialize all distances as INFINITE and visited[] as false
    for (int i = 0; i < graph->numVertices; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
    // Find shortest path for all vertices
    for (int count = 0; count < graph->numVertices - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed.
        // u is always equal to src in the first iteration.
        int u = minDistance(dist, visited, graph->numVertices);
        // Mark the picked vertex as processed
        visited[u] = 1;
        // Update dist value of the adjacent vertices of the picked vertex
        for (int v = 0; v < graph->numVertices; v++) {
            // Update dist[v] only if it is not in visited, there is an edge from u to v, and total weight of path from src to v through u is smaller than current value of dist[v]
            if (!visited[v] && graph->adjMatrix[u][v] != INT_MAX && dist[u] != INT_MAX && dist[u] + graph->adjMatrix[u][v] < dist[v]) {
                dist[v] = dist[u] + graph->adjMatrix[u][v];
            } } }
    // Print the constructed distance array
    printSolution(dist, graph->numVertices);
}
int main() {
    int vertices, edges, src, dest, weight;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    Graph* graph = createGraph(vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);
    for (int i = 0; i < edges; i++) {
        printf("Enter edge (source destination weight): ");
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(graph, src, dest, weight);
    }
    printf("Enter the source vertex: ");
    scanf("%d", &src);
    printf("Shortest distances from source vertex %d:\n", src);
    dijkstra(graph, src);
    return 0;
}
