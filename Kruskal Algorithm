#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// Structure to represent a graph edge
typedef struct {
    int src, dest, weight;
} Edge;
// Structure to represent a graph
typedef struct {
    int numVertices, numEdges;
    Edge* edges;
} Graph;
// Structure to represent a subset for Union-Find
typedef struct {
    int parent;
    int rank;
} Subset;
// Function to create a new graph
Graph* createGraph(int numVertices, int numEdges) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->numEdges = numEdges;
    graph->edges = (Edge*)malloc(numEdges * sizeof(Edge));
    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int index, int src, int dest, int weight) {
    graph->edges[index].src = src;
    graph->edges[index].dest = dest;
    graph->edges[index].weight = weight;
}
// Comparator function for sorting edges by weight
int compareEdges(const void* a, const void* b) {
    Edge* edge1 = (Edge*)a;
    Edge* edge2 = (Edge*)b;
    return edge1->weight - edge2->weight;
}

// Function to find the parent of a subset
int find(Subset* subsets, int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to perform union of two subsets
void unionSets(Subset* subsets, int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Function to find the Minimum Spanning Tree using Kruskal's algorithm
void kruskalMST(Graph* graph) {
    int numVertices = graph->numVertices;
    Edge result[numVertices]; // Stores the resultant MST
    int e = 0;                // Index variable for result[]

    // Step 1: Sort all the edges in non-decreasing order of their weight
    qsort(graph->edges, graph->numEdges, sizeof(graph->edges[0]), compareEdges);

    // Allocate memory for creating subsets
    Subset* subsets = (Subset*)malloc(numVertices * sizeof(Subset));

    // Create numVertices subsets with single elements
    for (int v = 0; v < numVertices; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Number of edges to be taken is equal to numVertices - 1
    while (e < numVertices - 1 && e < graph->numEdges) {
        // Step 2: Pick the smallest edge. And increment the index for the next iteration
        Edge next_edge = graph->edges[e++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        // If including this edge does not cause cycle, include it in result and increment the index
        if (x != y) {
            result[e - 1] = next_edge;
            unionSets(subsets, x, y);
        }
    }

    // Print the MST
    printf("Edges in Minimum Spanning Tree:\n");
    for (int i = 0; i < e - 1; i++) {
        printf("%d - %d\t%d\n", result[i].src, result[i].dest, result[i].weight);
    }

    free(subsets);
}

int main() {
    int numVertices, numEdges;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    Graph* graph = createGraph(numVertices, numEdges);

    for (int i = 0; i < numEdges; i++) {
        int src, dest, weight;
        printf("Enter edge (source destination weight): ");
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(graph, i, src, dest, weight);
    }

    // Find and print the Minimum Spanning Tree using Kruskal's algorithm
    kruskalMST(graph);

    free(graph->edges);
    free(graph);

    return 0;
}
